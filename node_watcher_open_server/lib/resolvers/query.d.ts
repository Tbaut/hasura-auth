import { Context } from '../types';
declare const Query: {
    blockNumbers(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").BlockNumber>;
    eras(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Era>;
    heartBeats(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").HeartBeat>;
    nominations(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Nomination>;
    offlineValidators(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").OfflineValidator>;
    rewards(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Reward>;
    stakes(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Stake>;
    sessions(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Session>;
    slashings(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Slashing>;
    totalIssuances(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").TotalIssuance>;
    validators(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Validator>;
    blockNumber(_parent: any, { blockNumberWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").BlockNumberNullablePromise;
    era(_parent: any, { eraWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").EraNullablePromise;
    nomination(_parent: any, { nominationWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").NominationNullablePromise;
    reward(_parent: any, { rewardWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").RewardNullablePromise;
    session(_parent: any, { sessionWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").SessionNullablePromise;
    slashing(_parent: any, { slashingWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").SlashingNullablePromise;
    stake(_parent: any, { stakeWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").StakeNullablePromise;
    totalIssuance(_parent: any, { totalIssuanceWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").TotalIssuanceNullablePromise;
    validator(_parent: any, { validatorWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").ValidatorNullablePromise;
    councils(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Council>;
    council(_parent: any, { councilWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").CouncilNullablePromise;
    councilMembers(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").CouncilMember>;
    councilMember(_parent: any, { councilMemberWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").CouncilMemberNullablePromise;
    motionStatus(_parent: any, { MotionStatusWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").MotionStatusNullablePromise;
    motionStatuses(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").MotionStatus>;
    motionProposalArgument(_parent: any, { MotionProposalArgumentWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").MotionProposalArgumentNullablePromise;
    motionProposalArguments(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").MotionProposalArgument>;
    motion(_parent: any, { MotionWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").MotionNullablePromise;
    motions(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Motion>;
    preimages(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Preimage>;
    preimage(_parent: any, { PreimageWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").PreimageNullablePromise;
    preimageStatuses(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").PreimageStatus>;
    preimageStatus(_parent: any, { PreimageStatusWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").PreimageStatusNullablePromise;
    proposals(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Proposal>;
    proposal(_parent: any, { ProposalWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").ProposalNullablePromise;
    proposalStatuses(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").ProposalStatus>;
    proposalStatus(_parent: any, { ProposalStatusWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").ProposalStatusNullablePromise;
    preimageArguments(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").PreimageArgument>;
    preimageArgument(_parent: any, { PreimageArgumentWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").PreimageArgumentNullablePromise;
    treasurySpendProposals(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").TreasurySpendProposal>;
    treasurySpendProposal(_parent: any, { TreasurySpendProposalWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").TreasurySpendProposalNullablePromise;
    treasuryStatuses(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").TreasuryStatus>;
    treasuryStatus(_parent: any, { TreasuryStatusWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").TreasuryStatusNullablePromise;
    referendums(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").Referendum>;
    referendum(_parent: any, { referendumWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").ReferendumNullablePromise;
    referendumStatuses(_parent: any, { where, orderBy, skip, after, before, first, last }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").FragmentableArray<import("../generated/prisma-client").ReferendumStatus>;
    referendumStatus(_parent: any, { referendumStatusWhereUniqueInput }: Record<string, any>, { prisma }: Context): import("../generated/prisma-client").ReferendumStatusNullablePromise;
};
export { Query };

image: parity/kubetools:latest
variables:
  KUBE_NAMESPACE:                  "polkassembly"
  CI_REGISTRY:                     "gcr.io/test-installations-222013"
  DOCKER_TAG:                      '$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA'
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       3
  # Variables required by Gitlab scanning
  SAST_DISABLE_DIND:               "true"
  SCAN_KUBERNETES_MANIFESTS:       "true"
  ANALYZER_TARGET_DIR:             "auth-server/"
  DS_DISABLE_DIND:                 "true"

# Enable Gitlab's security scanning
include:
  - template: SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml

kubesec-sast:
  variables:
    ANALYZER_TARGET_DIR: "kubernetes/"

stages:
  - test
  - dockerize
  - deploy
  - post-deploy

cache:
  key:                             '${CI_JOB_NAME}'
  paths:
    - node_modules/
    - packages/*/node_modules/

#### stage:                        test

lint-front-end:
  stage: test
  image: node:12
  interruptible:                   true
  dependencies:                    []
  script:
    - curl -o- -L https://yarnpkg.com/install.sh | bash
    - export PATH=$HOME/.yarn/bin:$PATH
    - cd front-end
    - yarn install
    - yarn lint
  rules:
    - changes:
      - "front-end/**/*"
  tags:
    - linux-docker

lint-back-end:
  stage: test
  image: node:12
  interruptible:                   true
  dependencies:                    []
  script:
    - curl -o- -L https://yarnpkg.com/install.sh | bash
    - export PATH=$HOME/.yarn/bin:$PATH
    - cd auth-server
    - yarn install
    - yarn lint
  rules:
    - changes:
      - "auth-server/**/*"
  tags:
    - linux-docker

#### stage:                        dockerize

.build_and_push:                   &build_and_push
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
  tags:
    - kubernetes-parity-build
  image: docker:git
  services:
    - docker:dind
  script:
    - POD_NAME=$(echo ${CI_JOB_NAME} | sed -E 's/^[[:alnum:]:]+-//')
    - export DOCKER_IMAGE="${CI_REGISTRY}/${KUBE_NAMESPACE}-${POD_NAME}"
    - export DOCKER_IMAGE_FULL_NAME=$DOCKER_IMAGE:$DOCKER_TAG
    - echo "$BUILD_ARGS"
    - echo "$DOCKER_REGISTRY_JSON" | docker login -u _json_key --password-stdin https://gcr.io
    - eval "docker build -t" "$DOCKER_IMAGE_FULL_NAME" "$BUILD_ARGS" "$POD_NAME"
    - docker push "$DOCKER_IMAGE_FULL_NAME"

dockerize:staging-front-end:
  stage: dockerize
  environment:
    name: parity-build
  before_script:
    - export BUILD_ARGS="--build-arg REACT_APP_HASURA_GRAPHQL_URL=$(printf \"$STAGING_REACT_APP_HASURA_GRAPHQL_URL\")"
    - export BUILD_ARGS="$BUILD_ARGS --build-arg REACT_APP_JWT_PUBLIC_KEY=$(printf "%s" \'"$STAGING_REACT_APP_JWT_PUBLIC_KEY"\')"
  only:
    - master
  <<: *build_and_push

dockerize:production-front-end:
  stage: dockerize
  environment:
    name: parity-build
  before_script:
    - export BUILD_ARGS="--build-arg REACT_APP_HASURA_GRAPHQL_URL=$(printf \"$PRODUCTION_REACT_APP_HASURA_GRAPHQL_URL\")"
    - export BUILD_ARGS="$BUILD_ARGS --build-arg REACT_APP_JWT_PUBLIC_KEY=$(printf "%s" \'"$PRODUCTION_REACT_APP_JWT_PUBLIC_KEY"\')"
  only:
    - tags
  <<: *build_and_push

dockerize-auth-server:
  stage: dockerize
  environment:
    name: parity-build
  only:
    - master
    - tags
  <<: *build_and_push

dockerize-chain-db-watcher:
  stage: dockerize
  environment:
    name: parity-build
  only:
    - master
    - tags
  <<: *build_and_push

#### stage:                        deploy

.deploy-k8s:                   &deploy-k8s
  script:
    - export DOCKER_TAG
    # check syntax
    - for f in kubernetes/polkassembly/*yaml; do echo $f; cat $f | envsubst | kubectl --dry-run --validate -n polkassembly apply -f -; done
    # print rendered yaml
    # - for f in kubernetes/polkassembly/*yaml; do echo $f; cat $f | envsubst; echo '---'; done
    # deploy yaml to cluster
    - for f in kubernetes/polkassembly/*yaml; do cat $f | envsubst | kubectl -n polkassembly apply -f -; done

deploy-staging:
  stage: deploy
  environment:
    name: dashboards-cluster-1
  tags:
    - kubernetes-parity-build
  only:
    - master
  <<: *deploy-k8s

deploy-production:
  stage: deploy
  environment:
    name: parity-prod
  tags:
    - kubernetes-parity-build
  only:
    - tags
  <<: *deploy-k8s

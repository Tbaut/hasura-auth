"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extensionizer = _interopRequireDefault(require("extensionizer"));

// Copyright 2019 @polkadot/ui-keyring authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const lastError = type => {
  const error = _extensionizer.default.runtime.lastError;

  if (error) {
    console.error("ExtensionStore.".concat(type, ":: runtime.lastError:"), error);
  }
};

class ExtensionStore {
  all(cb) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _extensionizer.default.storage.local.get(null, result => {
      lastError('all');
      Object.entries(result).forEach(([key, value]) => {
        cb(key, value);
      });
    });
  }

  get(key, cb) {
    _extensionizer.default.storage.local.get([key], result => {
      lastError('get');
      cb(result[key]);
    });
  }

  remove(key, cb) {
    _extensionizer.default.storage.local.remove(key, () => {
      lastError('remove');
      cb && cb();
    });
  }

  set(key, value, cb) {
    // shortcut, don't save testing accounts in extension storage
    if (key.startsWith('account:') && value.meta && value.meta.isTesting) {
      cb && cb();
      return;
    }

    _extensionizer.default.storage.local.set({
      [key]: value
    }, () => {
      lastError('set');
      cb && cb();
    });
  }

}

exports.default = ExtensionStore;